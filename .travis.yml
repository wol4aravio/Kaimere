env:
  global:
    - secure: "dViZ4YMWIt8ZojPla9WnoWJiLN6rZ3JYGxinCOrFKCrhUYjd05YDxuo8MJUeewOuyFppfwHHIDwGhDSMD88rITFEFt3JutT/QkAenux3emwzH95NMKWGljO0sEm/AEi/pPFoYKqefBZGyKX4jb/D3x3usx/9JrDENepBbs4Nz7naiCApvI3pdBfDJ65lXqBdPcqj6fSutmbfLVj8xbRKF7tYRbkUTTUrgI6WzFNBvYu8dWU5gHCENuSeOr8wAtJkbU+t6b6uA9pzSnXiPVBNyxQDQ+debnz2r0q9Dm527inaMpf4IL34rI6Is/qraE0toafnJp5S2lAFBOCTt90ul2Atr2SXLtpXLu/oGxPN4qJN3AOT/qP19/bsTKrK4l4xGIP0uASPwqudpPo7Kn7TXJCgPEtf+H9v2bLE9jtiPD9AuRIjU7SDFjea4EGpbFrqTTcLnMwQaAmpx30UW9kwuxQOcoUj44oB23nuPDWVojNrt/onqpEBI9dwtMtag2IIycgT+G12NTpAhvhtYATsus0qY+/PPTsySTVS7Ip1tm8cajt3gUcpBhw3wgsDxPCtwvIhQRCcwIrkvPobSmF/7JCAHNIul77QshtuE8+1vYEoq0jyFNeypa+CygIh5fvsQtZL/ORbh6nBwXMZQLW3+3kkqzvAp6LCN958XDcJ1ZM="
    - secure: "JOgFsf3X6R56xX5rO2n571AJKYe9taRMmequBqbFv/KUfHrrJmNsU7/hmifqIDQ9R9AFX8TrtzWWWog2l5q42m7COl4h/WdzGFkDuwTJd1L1vKpp1miiE8PEmyIDQNjJSEXSLncoY3vbmwNk6zveO/ALkDxSdiM+fyw57IHPcSfvAdAqd2vO8BMUrslvFzr6eY+kIIeF9JXffV+HvXCzBTTdymLadhy9B1DyeDUN7s9vhT/Fot0HKV5i3gSB6XcwD36yXk0FB27a26WEdEb1mvEnwsKjkAqiQabsJUDlO387MBllkCbwQsvSeZzOjSc5EeGEMCjBjBVdZeRQFdqsghh6SK3B1rpnFxIBUzPh+ht9/fHEFeWHTlPc94SCbA2qWJygJ2OeCEns5drRCVO7raSX59Cqj9SKH+a8+sNKxQypgHmU8zdBEWOdk3ET88gB8GYLlq16rPMeUqj9xCuEsvBxsAjtAm/Yxp22tWfcqSTet1cY4+JdIb4I5WFfVYbuXftSgoDVYR4FrUTg3dS5TZZHtA8uONwEAuLP7orryDKl0qSNEKuleYPmeEvAdHr5GDNtmoHaDq8Kfvqb9Fsk9qZtlfXEWkPfniQUnvDdwJdMUR0FOVhgORKR/9WdacvEcpBrYDhZUcPnFvR1O+gjk4ZwzXz8RDjEjS8Dous7sQU="
    - secure: "ovxoZQAhCQIeHY+pYZAJUv+QabcXWM4BjRxFP7pMctKVEUF3Pa0ajEfiP7XPfLiwZyGVIhitHxpYxgt9n7RVFtanhXan9RWe0gjN5enyDFiJBnlXxZwmLAIzJeV8CpLCKyNBg2XU7eKqMFjNI/MnVOgGsO/5WOz/5vhLH/Z13QkoIZm0BeGrW8a1lAOs0/jmpPs9nhmcfGncxQR1NyIGayo+Fj5ZMfs2COL6wibSMzSKpT0OngjQy47QHxHZ3Q3oRuMH0o9f0x6+/jE+5NCfvsO5kBclK69SL6sn7QjO4IsJdSjY1kTjeRco3y1wlhbx4xKDf+7C8jqu+y9gTAvxhLlbYuCxJTqO6aDHeoYY52j9c/DVkQORmgqwJ0XrY1XmQDWAFMeUy8Js44M3LjJc0bsS3JxY4s58bCHasiDojSq7g1Jnzj9psvJviRTzZYb5dcgpmQE8ckjDkw4X9Ljcz6vb8q0pIACMeE2F1GIMyuX4yHhnTmWkOfkeMlUEmVqbzCNe9la2kyKEe1QUjvQhpa99rVygLVmmRKjfdrHe84oObdygCfNC0NSq+iPkJ6Y7MfbHiLYsI9Mkw9Sw5AsxYaxw4D+8SpphTmcrOzw47VvLIEfvui6JB55I23hM88NfmbH8LtQovv0gmGXFBdg6SVZnsJ3+eLfulhackYVN/hI="
    - secure: "FswcxXtYBvEnH36CLLHwfGnc8gtZMHnIMJSs4SCycJc+4aMh3lnrB+KxlSQSg+xBu5BjVCTxn7wQPSgK4U1XbvdrGqKREmpBYMwg2rNmOCZcOtowVm0qR+7doUoXFoAE7dAwe7WT0zbFXEVW4jzapKiu6p3TBIWLvizmPufsgLyKgnujWocoynN17aBDoWSXfXbXwH+ptr1KBGuAD+fB8eVJbB6Muyjv/eXHLXIY/inMGPGjnwpFHv9Soja3SC2oPx9ZRZIAHYCAg6p2XH2UkkaiZ1ASV/L81kQ14Rdbr2lklaj9b/XwEQKdCkGxYi03UjPCnT7ze/FMKYW0v3i5FHDfa3agmTm8Af86VYWosBWLW6KACiD2ru6AJ6Tj1GqMC8+ubTbfK1ItUCw62GA5SH/wY8G0Tez5Y4cm9ijQQNIeDTH/MEDlxL5cGX8uqd5Wa27LnNwTgoHgl8yBC31gCblI4Y5W7Y8eUNNwH9e1rdViH1cvCP+OmbDMA/xKH/atZkB52j5H4toWpdVPYPvaZBOjgZ0ShUKH0ImixfHID4CudXbGPSCZtWFJ/5//SkKYrXmdjE5z00R0TV+clE/Q7vw26/Muj49HrZ2g7pVfN1v+Kbw3RZ4fD5WH+/hblRNmnIRXnx8i05lfXnyviQLUDfCa3kgqJITRbl/lC/ghJJc="
    - OSOL_EXTREMUM_TASKS_LOC=${TRAVIS_BUILD_DIR}/Tasks
    - OSOL_EXTREMUM_CONFIGS_LOC=${TRAVIS_BUILD_DIR}/Configs
    - PYTHON_VER=3.6.2

jobs:
  include:
    # - stage: preliminaries
    #   env:
    #     - JOB_NAME="Building python tools"
    #   language: python
    #   python: "3.6"
    #   before_script:
    #     - cd PyTools
    #     - python OSOL_Extremum/setup.py install
    #     - pip install pytest pytest-cov pytest-flask
    #     - cd OSOL_Extremum
    #   script:
    #     - pytest --cov=./
    #   after_success:
    #     - bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN



    # - stage: cores
    #   env:
    #     - JOB_NAME="Building JVM core"
    #   language: scala
    #   scala: 2.12.5
    #   sudo: required
    #   before_script:
    #     - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    #     - bash miniconda.sh -b -p $HOME/miniconda
    #     - export PATH="$HOME/miniconda/bin:$PATH"
    #     - hash -r
    #     - conda config --set always_yes yes --set changeps1 no
    #     - conda update -q conda
    #     - conda create -q -n test-environment python=$PYTHON_VER
    #     - source activate test-environment
    #     - cd PyTools
    #     - python OSOL_Extremum/setup.py install
    #     - cd ../Cores/JVM
    #   script:
    #     - travis_wait 30 sbt clean coverage test coverageReport
    #   after_success:
    #     - bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN
    #     - test $TRAVIS_BRANCH = "master" &&
    #       mvn clean deploy --settings settings.xml

    # - stage: cores
    #   env:
    #     - JOB_NAME="Building .Net core"
    #   language: csharp
    #   dotnet: 2.0.0
    #   sudo: required
    #   before_script:
    #     - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    #     - bash miniconda.sh -b -p $HOME/miniconda
    #     - export PATH="$HOME/miniconda/bin:$PATH"
    #     - hash -r
    #     - conda config --set always_yes yes --set changeps1 no
    #     - conda update -q conda
    #     - conda create -q -n test-environment python=$PYTHON_VER
    #     - source activate test-environment
    #     - cd PyTools
    #     - python OSOL_Extremum/setup.py install
    #     - cd ../Cores/DotNet
    #   script:
    #     - dotnet restore
    #     - dotnet build -c Debug
    #     - dotnet minicover instrument --assemblies bin/**/**/OSOL.Extremum.Cores.DotNet.dll
    #     - travis_wait 30 dotnet test -c Debug --no-build
    #     - dotnet minicover opencoverreport
    #     - dotnet minicover uninstrument
    #   after_success:
    #     - bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN
    #     - test $TRAVIS_BRANCH = "master" && 
    #       dotnet pack -c Release --include-source --output nuget &&
    #       dotnet nuget push ./nuget/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json



    # - stage: algorithms
    #   env:
    #     - JOB_NAME="Building Scala Random Search"
    #   language: scala
    #   scala: 2.12.5
    #   sudo: required
    #   before_script:
    #     - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    #     - bash miniconda.sh -b -p $HOME/miniconda
    #     - export PATH="$HOME/miniconda/bin:$PATH"
    #     - hash -r
    #     - conda config --set always_yes yes --set changeps1 no
    #     - conda update -q conda
    #     - conda create -q -n test-environment python=$PYTHON_VER
    #     - source activate test-environment
    #     - cd PyTools
    #     - python OSOL_Extremum/setup.py install
    #     - cd ../Algorithms/Scala/RandomSearch
    #   script:
    #     - travis_wait 30 sbt clean coverage test coverageReport
    #   after_success:
    #     - bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN
    #     - test $TRAVIS_BRANCH = "master" &&
    #       mvn clean deploy --settings settings.xml

    # - stage: algorithms
    #   env:
    #     - JOB_NAME="Building C# Random Search"
    #   language: csharp
    #   dotnet: 2.0.0
    #   sudo: required
    #   before_script:
    #     - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    #     - bash miniconda.sh -b -p $HOME/miniconda
    #     - export PATH="$HOME/miniconda/bin:$PATH"
    #     - hash -r
    #     - conda config --set always_yes yes --set changeps1 no
    #     - conda update -q conda
    #     - conda create -q -n test-environment python=$PYTHON_VER
    #     - source activate test-environment
    #     - cd PyTools
    #     - python OSOL_Extremum/setup.py install
    #     - cd ../Algorithms/CSharp/RandomSearch
    #   script:
    #     - dotnet restore
    #     - dotnet build -c Debug
    #     - dotnet minicover instrument --assemblies bin/**/**/OSOL.Extremum.Algorithms.CSharp.RandomSearch.dll --sources ./
    #     - travis_wait 30 dotnet test -c Debug --no-build
    #     - dotnet minicover opencoverreport
    #     - dotnet minicover uninstrument
    #   after_success:
    #     - bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN
    #     - test $TRAVIS_BRANCH = "master" && 
    #       dotnet pack -c Release --include-source --output nuget &&
    #       dotnet nuget push ./nuget/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json

    # - stage: algorithms
    #   env:
    #     - JOB_NAME="Building F# Random Search"
    #   language: csharp
    #   dotnet: 2.0.0
    #   sudo: required
    #   before_script:
    #     - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    #     - bash miniconda.sh -b -p $HOME/miniconda
    #     - export PATH="$HOME/miniconda/bin:$PATH"
    #     - hash -r
    #     - conda config --set always_yes yes --set changeps1 no
    #     - conda update -q conda
    #     - conda create -q -n test-environment python=$PYTHON_VER
    #     - source activate test-environment
    #     - cd PyTools
    #     - python OSOL_Extremum/setup.py install
    #     - cd ../Algorithms/FSharp/RandomSearch
    #   script:
    #     - dotnet restore
    #     - dotnet build -c Debug
    #     - dotnet minicover instrument --assemblies bin/**/**/OSOL.Extremum.Algorithms.FSharp.RandomSearch.dll --sources ./
    #     - travis_wait 30 dotnet test -c Debug --no-build
    #     - dotnet minicover opencoverreport
    #     - dotnet minicover uninstrument
    #   after_success:
    #     - bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN
    #     - test $TRAVIS_BRANCH = "master" && 
    #       dotnet pack -c Release --include-source --output nuget &&
    #       dotnet nuget push ./nuget/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json

    # - stage: algorithms
    #   env:
    #     - JOB_NAME="Building Java Random Search"
    #   language: java
    #   jdk: oraclejdk8
    #   sudo: required
    #   before_script:
    #     - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    #     - bash miniconda.sh -b -p $HOME/miniconda
    #     - export PATH="$HOME/miniconda/bin:$PATH"
    #     - hash -r
    #     - conda config --set always_yes yes --set changeps1 no
    #     - conda update -q conda
    #     - conda create -q -n test-environment python=$PYTHON_VER
    #     - source activate test-environment
    #     - cd PyTools
    #     - python OSOL_Extremum/setup.py install
    #     - cd ../Algorithms/Java/RandomSearch
    #   script:
    #     - mvn clean install -DskipTests=true
    #     - travis_wait 30 mvn cobertura:cobertura
    #   after_success:
    #     - bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN
    #     - test $TRAVIS_BRANCH = "master" &&
    #       mvn clean deploy --settings settings.xml



    - stage: apps
      env:
        - JOB_NAME="Testing DotNet Runner"
        - TEST_TOL=1e-3
      language: csharp
      dotnet: 2.0.0
      sudo: required
      before_script:
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        - bash miniconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH"
        - hash -r
        - conda config --set always_yes yes --set changeps1 no
        - conda update -q conda
        - conda create -q -n test-environment python=$PYTHON_VER
        - source activate test-environment
        - cd PyTools
        - python OSOL_Extremum/setup.py install
        - cd ../Apps/DotNet/Runner
      script:
        - dotnet publish -c Release -o runner
        - cd runner
        - echo $'import math\n\ndef square(x):\n\treturn x * x\n\nf = open(\'result.csv\', \'r\')\nvalues=list(map(float, [x.strip() for x in f.readlines()][-1].split(\',\')))\nf.close()\ntol=${TEST_TOL}\nerror = math.sqrt(sum(list(map(square, values))))\nif error > tol:\n\traise Exception()' > test.py
        - echo 'Testing CSharp RandomSearch'
        - dotnet OSOL.Extremum.Apps.DotNet.Runner.dll --algorithm ${OSOL_EXTREMUM_CONFIGS_LOC}/CSharp/RandomSearch/Dummy.json --task ${OSOL_EXTREMUM_TASKS_LOC}/Dummy/Dummy_3.json --port 5017 --field f --result result --output csv
        - python test.py
        - rm result.csv
        - echo 'Testing FSharp RandomSearch'
        - dotnet OSOL.Extremum.Apps.DotNet.Runner.dll --algorithm ${OSOL_EXTREMUM_CONFIGS_LOC}/FSharp/RandomSearch/Dummy.json --task ${OSOL_EXTREMUM_TASKS_LOC}/Dummy/Dummy_3.json --port 5017 --field f --result result --output csv
        - python test.py
        - rm result.csv
